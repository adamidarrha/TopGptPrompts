{"gizmo": {"id": "g-KpF6lTka3", "organization_id": "org-yS84io1xyQry388ZRkCiKMsE", "short_url": "g-KpF6lTka3-alltrails", "author": {"user_id": "user-n5OFCXwmMX59FvXYfo1XB63e", "display_name": "alltrails.com", "link_to": "https://alltrails.com", "selected_display": "website", "is_verified": true, "will_receive_support_emails": null}, "voice": {"id": "ember"}, "workspace_id": null, "model": null, "instructions": null, "settings": null, "display": {"name": "AllTrails", "description": "Find trails that fit your nature for your next hike, ride, or run.", "welcome_message": "", "prompt_starters": ["Which trails near me are dog-friendly?", "Tell me about Angel's Landing trail.", "Show me easy hiking trails near New York City.", "What are the top 3 trails in Olympic National Park?"], "profile_picture_url": "https://files.oaiusercontent.com/file-wJ9EBGnkL70yfZwQT59iYtMm?se=2123-12-17T18%3A55%3A31Z&sp=r&sv=2021-08-06&sr=b&rscc=max-age%3D1209600%2C%20immutable&rscd=attachment%3B%20filename%3DAllTrails_Logo_ForCircle%25402x.png&sig=ieep4aIfXG0KmF2O/fnvBUoTu5WstnV1%2BJvvnJ4UeL8%3D", "categories": ["lifestyle"]}, "share_recipient": "marketplace", "updated_at": "2024-01-13T06:35:33.886895+00:00", "last_interacted_at": "2024-01-12T21:34:31.189243+00:00", "tags": ["public", "reportable", "uses_function_calls"], "version": null, "live_version": null, "training_disabled": null, "allowed_sharing_recipients": null, "review_info": null, "appeal_info": null, "vanity_metrics": {"num_conversations_str": "25K+", "num_pins": 0, "num_users_interacted_with": 0}, "workspace_approved": null}, "tools": [{"id": "gzm_cnf_jzOLX0x2ccOfZyxnIub9W4hs~gzm_tool_DcAbpCsPGLt1849auxSquuyT", "type": "plugins_prototype", "settings": null, "metadata": {"action_id": "g-0b63a86dc59bc67cae9c7c7e0afa08f048f38cbc", "domain": "chatgpt-production.alltrails.com", "raw_spec": "---\nopenapi: 3.1.1\ninfo:\n  title: AllTrails\n  version: 1.0.0\n  description: \"Allows users to retrieve a list of trails based on search criteria.\"\nservers:\n  - url: https://chatgpt-production.alltrails.com\npaths:\n  /search-trails:\n    post:\n      operationId: searchTrails\n      x-openai-isConsequential: false\n      summary: \"Retrieves trail(s) from AllTrails that match the user's query.\"\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Query'\n      responses:\n        '200':\n          description: \"List of trails retrieved successfully.\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    description: \"An array of trail objects that includes trail metadata.\"\n                    schema:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Trail'\n                  assumed_location:\n                    description: |\n                      This property represents the location that AllTrails has assumed based on the user's input. Given the potential ambiguity when users provide only a city_name or area_name that might be common worldwide, AllTrails queries Algolia for the most likely match. While the majority of the time the location is accurate, there are instances where it might not align with the user's intended location.\n                      In the case that a 'worldwide' search is performed, this property will be populated to 'worldwide'. In this case, state that the results are worldwide and do not include a specific location.\n                      \n                      This property MUST be communicated word-for-word to the user at the start of the response. For example, if `assumed_location` is \"Hanover, New Hampshire, United States\", then the output should start by mentioning the full detailed location e.g. 'Here are some trails in Hanover, New Hampshire, United States ...'. \n\n                      The assistant should always check the `assumed_location` with the user to verify that the recommendations are for the intended area. If there's a discrepancy, users might need to provide more specific location details in their query to get accurate trail recommendations.\n                    schema:\n                      type: string\n                  EXTRA_INFORMATION_FOR_ASSISTANT:\n                    description: |\n                      This property includes additional instructions for how the assistant should output results to the user.\n                    schema:\n                      type: string\n        '204':\n          description: |\n            A 204 status code is used when the server successfully processes the request, but there is no content to return to the user. When this is returned, the assistant should ask the user to retry their request with different details. If this value is returned, the assistant should NOT return any trail information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '400':\n          description: |\n            A 400 status code is used for bad requests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: |\n            A 401 status code is used when the user is not authenticated. Access token is missing or invalid.\n        '500':\n          description: |\n            A 500 status code is used when server has encountered an unexpected condition or configuration problem that prevents it from fulfilling the request made by the client.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    Error:\n      type: object\n      properties:\n        ERROR_MESSAGE:\n          description: |\n            When an error occurs, the assistant should:\n\n            1. Use this message to determine the nature of the error:\n              - If the error message indicates a configuration or internal issue, the assistant should acknowledge the error, inform the user that it's a technical issue not caused by their input, and suggest trying again later.\n              - If the error message points to an issue with the query construction, such as \"filter string is invalid\", the assistant should recognize its own mistake in formulating the request. It should then re-prompt the user with a clarified request or provide an alternative solution.\n            2. In cases where the error's root cause is ambiguous or not explicitly mentioned in the `ERROR_MESSAGE`, the assistant should handle the situation gracefully, apologizing for the inconvenience and suggesting potential corrective actions or alternative queries.\n\n            The primary goal is to ensure a smooth user experience. the assistant should always strive to be self-correcting, avoid placing blame on the user, and provide clear directions or alternatives when errors arise.\n          schema:\n            type: string\n    Query:\n      type: object\n      properties:\n        country_name:\n          description: |\n            Full name of the country where trails are located. If the user does not explicitly specify the `country_name` property, the `country_name` property should be deduced from the `state_name`, `city_name`, or `area_name` property. \n            \n            For example, if user asks for 'trails in San Francisco', automatically set the `country_name` property to 'United States' and the `state_name` property to 'California'.\n\n            If the user specifies they're interested in trails around the world, set `country_name` to 'world'.\n\n            This property MUST always be populated.\n          schema:\n            type: string\n        state_name:\n          description: |\n            Full name of the state or region where trails are located. If not given, the `state_name` property should be deduced from the `city_name`, or `area_name` property. \n            \n            For example, if user asks for trails in Rochester, automatically set `country_name` to 'United States' and `state_name`='New Hampshire'.\n\n            This property MUST be populated whenever a user mentions a specific state, city, or area. \n\n            Always ensure the state or region name is in its full form, not abbreviated.\n          schema:\n            type: string\n        city_name:\n          description: |\n            This property represents the full name of the city or town where trails are located and MUST be populated if a user specifies a city in their query.\n\n            To determine its value:\n            1. If the user explicitly mentions a city or town, use that city's full name. For instance, if a user says 'trails in San Francisco', set `city_name` to 'San Francisco'.\n            2. Do NOT populate this property if the user's query is about specific parks, forests, or wilderness areas. For example, if the user asks for trails in Yellowstone, omit the `city_name` property entirely.\n\n            Always ensure the city or town name is in its full form, not abbreviated or shortened.\n          schema:\n            type: string\n        area_name:\n          description: |\n            This property represents the full name of a national, state, city, or local park, forest, or wilderness area and MUST be populated if a user specifies such an area in their query.\n\n            To determine its value:\n            1. If the user explicitly mentions a specific park, forest, or wilderness area, use its full name. For instance, if a user says 'trails in Tahoe', set `area_name` to 'Tahoe National Forest'.\n            2. If the user provides a well-known abbreviation or shortened name of an area, deduce the full name. For example, if the user asks for trails in 'Yosemite', set `area_name` to 'Yosemite National Park'.\n\n            Always ensure the area name is in its complete and accurate form.\n          schema:\n            type: string\n        location_helper:\n          description: |\n            This property specifies if the user wants to find trails \"in\" or \"near\" the request of their specified location.\n\n            To determine the appropriate value:\n            1. If the user provides a broad or non-specific location, such as a state or a country (i.e. if area_name and city_name are not populated), then 'location_helper' should ALWAYS be set to 'in', regardless of the user's phrasing.\n            2. If the user specifies a more granular or specific location, like a city or an area (i.e. if area_name or city_name is populated), then the value can be set to 'near' if the user's query indicates proximity (e.g. 'trails near...'). \n\n            For clarity:\n            - If a user says 'trails in San Francisco' or 'trails in Yellowstone National Park', then 'location_helper' should be set to 'in'.\n            - If a user says 'trails near San Francisco' or 'trails near Yellowstone National Park', then 'location_helper' should be set to 'near'.\n            - If a user says 'trails in California' or 'trails in the United States', then 'location_helper' should be set to 'in'.\n            - If a user says 'trails near California' or 'trails near the United States', then 'location_helper' should be set to 'in'.\n          schema:\n            type: string\n            enum: [in, near]\n            default: in\n        radius:\n          description: |\n            This property specifies the search radius centered around a given location, represented IN METERS. It's crucial to determine its value based on the user's query and the `location_helper` property.\n\n            To determine its value:\n            1. If `location_helper` is set to 'in', DO NOT populate this property.\n            2. If `location_helper` is set to 'near':\n              - If the user provides a specific distance, convert that distance to meters and use it. For example, if a user says 'trails within 10 miles of Greenpoint, Brooklyn', set `radius` to 16093 meters.\n              - If the user doesn't specify a distance, default `radius` to 32187 meters (approximately 20 miles). Ensure to notify the user of this default value in the response.\n\n            Always ensure the value for `radius` is an integer. If conversions result in a float, round up or down to the nearest whole number.\n          schema:\n            type: integer\n        sort_by_dist_bool:\n          description: |\n            If the user explicitly emphasizes that they would like the results sorted by distance (e.g. 'closest trails to Seattle'), then `sort_by_dist_bool` should be set to `true`. \n            \n            If the user simply says that they're interested in results near a location, assume that the user wants their results returned in the default popularity-based order.\n          schema:\n            type: boolean\n            enum: [true, false]\n            default: false\n        query:\n          description: |\n            The 'query' property is a text-based string used to filter trails by their names or other textual attributes.\n\n            To determine its value:\n            1. Extract specific trail names or textual attributes mentioned by the user. For instance, if a user asks about the 'Lands End Trail', set `query` to 'Lands End'.\n            2. If the user does not specify a particular trail name or attribute, this property may be left empty or omitted.\n\n            It's essential to format this property correctly, as it directly influences the accuracy of the search results.\n          schema:\n            type: string\n        num_trails:\n          description: |\n            The 'num_trails' property specifies the number of trail recommendations the user wishes to receive.\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 20\n            default: 3\n        raw_query:\n          description: |\n            The 'raw_query' property is essential and MUST be populated for every request.\n\n            It captures the user's query in its exact, unaltered form. This means capturing the user's input word for word without any modifications or omissions.\n\n            For instance, if a user says, 'Show me trails in San Francisco under 30 miles', the `raw_query` should be set to 'Show me trails in San Francisco under 30 miles'.\n\n            Accurately recording the 'raw_query' ensures that the user's original intent is preserved and can be referenced if needed.\n          schema:\n            type: string\n        filters:\n          description: |\n            The 'filters' property is a vital component and MUST be populated for every request, even when it seems duplicative to do so.\n            It is a an intricate Algiolia filter string tailored to refine search results based on user preferences.\n\n            Here's how to construct the `filters` string:\n            1. **Parameters**: The string is built using a combination of specific parameters. Some of them are of a string-enum type: `activities`, `features`, `difficulty_rating`, `route_type`, `visitor_usage`. Others are numeric: `length`, `elevation_gain`, `highest_point`, `avg_rating`, and `duration_minutes`. Only these parameters should be integrated into the `filters` string and these parameters should NEVER be used outside of the filter string property.\n            2. **Boolean Operators**: Use `AND` and `OR` operators to combine conditions. Always group conditions with parentheses for clarity. For example, for a query like 'Dog-friendly trails in San Francisco under 5 hours', the string would be: `(features:dogs OR features:dogs-leash) AND duration_minutes < 300`.\n            3. **Numerical Parameters**: For parameters `length`, `elevation_gain`, `highest_point`, `avg_rating`, and `duration_minutes`, use \"=\" for exact matches and \"<\" or \">\" for comparisons. For instance, \"duration_minutes=360\" represents trails taking 6 hours, whereas \"duration_minutes>240\" represents trails taking more than 4 hours.\n            4. **String-Enum Parameters**: Use a colon \":\" for these. For instance, \"features:dogs\" or \"activities:backpacking\".\n            5. **Default Value**: If the user doesn't specify any filtering criteria, set the `filters` parameter to an empty string.\n\n            Below are the details of the various parameters (separated by horizontal rules) that can be used as part of the `filters` string:\n\n            ---\n\n            The 'activities' parameter (utilized only in the filters property) is used to filter trails based on specific outdoor activities they accommodate.\n\n            Match the user's mentioned activities with the provided enums. \n            For instance, if a user says 'trails with bike paths', then `(activities:mountain-biking OR activities:road-biking)` should be included in the `filters` string.\n\n            Here is a dictionary describing the ONLY activities that are supported by this API:\n\n            - backpacking: Outdoor recreation of carrying gear on one's back while hiking for more than a day.\n            - birding: Bird-watching. Use this when the user is interested in watching birds.\n            - camping: Camping. Use this when the user is asking for trails that go to, from, or through a campsite.\n            - xc-skiing: The sport of skiing across the countryside (cross-country skiing), often through woods and usually on relatively flat terrain.\n            - fishing: Fishing. Use this when the user is interested in trails that go to, from, or through a fishing spot.\n            - hiking: The activity of going for long walks in the country or woods. Use this whenever a user mentions hiking.\n            - horses: Use this when the user is looking for horseback riding trails or specifies that they are an equestrian.\n            - mountain-biking: Mountain biking is a sport of riding bicycles off-road, often over rough terrain, usually using specially designed mountain bikes.\n            - off-road-driving: Off-roading is the activity of driving or riding in a vehicle on unpaved surfaces such as sand, dirt, gravel, riverbeds, mud, snow, rocks, and other natural terrain.\n            - paddle-sports: Any sport involving the propulsion of a watercraft by means of a paddle. Kayaking and canoeing are paddlesports.\n            - road-biking: Road cycling is the a form of cycling in which cyclists ride on paved roadways.\n            - rock-climbing: The sport or activity of climbing rock faces, especially with the aid of ropes and special equipment.\n            - scenic-driving: Scenic driving. Driving routes through areas with good views.\n            - skiing: The action of traveling over snow on skis, especially as a sport or recreation.\n            - snowshoeing: A very specific activity of walking over snow wearing snowshoes.\n            - trail-running: Use this when the user is interested in trails supporting any running activity (running, jogging, trail running, etc.)\n            - walking: Use this when the user is interested in trails supporting any casual walking activity (walking, strolling, etc.)\n            - bike-touring: Bike touring. Bicycle touring can range from single-day trips to extended travels spanning weeks or months.\n            - via-ferrata: A specific type of climbing route found in the Alps and certain other Alpine locations where the user hangs or clips onto cables.\n            - whitewater-kayaking: The activity of paddling a kayak on whitewater (turbulent water).\n\n            If the user's mentioned activities don't align with the provided enums, inform the user of the available activity options and seek further clarification.\n            It's crucial to distinguish between `activities` and `features`. Activities typically involve actions, often ending in '-ing' (e.g. 'hiking', 'biking'). NEVER list features, such as 'dogs' or 'waterfall', under `activities`. Always cross-reference with the provided enums to ensure accuracy.\n            Only apply these activity-related parameters if the user explicitly mentions them in their query. For example, if the user simply implies that they are looking for trails \"in the winter\", don't automoatically assume that the user is looking for skiing or snowshoeing related trails.\n\n            ---\n\n            The 'features' parameter is employed to filter trails based on specific characteristics or attributes they possess, either inherent to the trail or related to its accessibility/suitability.\n            \n            Pay close attention to the user's specific requirements regarding dogs:\n              - If a user inquires about 'dog-friendly trails', then use `(features:dogs AND features:dogs-leash)`. \n              - If a user specifies wanting trails where dogs are allowed without leashes, then use `features:dogs` only.\n              - If a user specifies a preference for trails where dogs must be on leashes, then use `features:dogs-leash` only.\n              - In the absence of specific instructions about leashes, include both ['dogs', 'dogs-leash'] to cover all dog-friendly trails.\n            \n            Here is a dictionary describing the ONLY features that are supported by this API:\n\n            - ada: Trail is disabilities-friendly (e.g. wheelchairs, wheelchair friendly...etc)\n            - beach: Trail features a beach.\n            - cave: Trail features a cave.\n            - dogs: Trail is dog friendly, doesn't require a leash. \n            - dogs-leash: Trail is dog friendly, but requires a leash.\n            - dogs-no: Trail is not dog friendly, no dogs are allowed.\n            - forest: Trail features a forest.\n            - lake: Trail features a lake.\n            - kids: Trail is kid/child friendly. \n            - hot-springs: Trail features hot springs.\n            - paved: Trail is paved.\n            - partially-paved: Trail is partially paved.\n            - rails-trails: Trail follows railroad rails.\n            - river: Trail features a river.\n            - strollers: Trail is stroller friendly.\n            - views: Trail has good views along it.\n            - waterfall: Trail features a waterfall.\n            - wild-flowers: Trail features wild flowers.\n            - wildlife: Trail features wildlife (animals).\n            - off-trail: Trails that involve a lot of bush-whacking and route finding.\n            - no-shade: Trail is not situated well for users who want to avoid the sun.\n            - city-walk: Urban trail routes going through the middle of cities.\n            - historic-site: Trail is located in or by a historic site.\n            - pub-crawl: Trails that are representative of pub crawls, the act of visiting multiple pubs or bars in a single session. Primarily used in the UK.\n            - fee: Trail is not free OR requires a ticket to be purchased in order to access.\n            \n            If the user's mentioned features don't correspond loosely with the provided enums, inform them of the available feature options and request further details. \n            It is essential that the assistant doesn't incorrectly apply an activity type as a feature or vice-versa.\n\n            ---\n\n            The 'difficulty_rating' parameter represents the trail's level of difficulty. It can be ONLY one of the following string values:\n\n            - easy\n            - moderate\n            - hard\n\n            For example: If a user asks for 'easy trails', then `difficulty_rating:easy`.\n\n            ---\n\n            The 'route_type' parameter specifies the configuration or layout of the trail. It can be ONLY one of the following string values:\n\n            - loop: The start and end points are the same.\n            - out-and-back: One travels to a destination and then retraces their steps back to the starting point.\n            - point-to-point: The trail starts and ends at different locations.\n\n            For example, if user asks for 'loop trails', then `route_type:loop`.\n\n            ---\n\n            The 'visitor_usage' parameter represents the level of traffic on the trail. It can be ONLY one of the following string values:\n\n            - light\n            - moderate\n            - heavy\n            - extreme\n\n            For example, if user asks for 'trails with light to moderate trail traffic', then `visitor_usage:light OR visitor_usage:moderate`.\n\n            ---\n\n            The 'length' parameter is a number that represents the length of a trail in meters.\n            \n            For example, if user asks for 'trails that are 1 mile long', then `length=1609.34`.\n            \n            Perform arithmetic to calculate the total length of the trail as a trip, if needed.\n\n            ---\n\n            The 'elevation_gain' parameter is a number that represents the elevation gain of a trail in meters.\n\n            For example, if user asks for 'trails with 6000 ft elevation gain', then `elevation_gain=1828.8`.\n\n            ---\n\n            The 'highest_point' parameter is a number that represents the highest point on a trail in meters.\n\n            For example, if user asks for 'trails with a highest point of 8000 ft', then `highest_point=2438.4`.\n\n            ---\n\n            The 'avg_rating' parameter is a number that represents the average user rating for a trail based on a 5-star scale (ranges from 1 to 5).\n\n            For example, if a user asks for 'trails rated 4.2 stars', then `avg_rating=4.2'.\n            \n            If the user specifies a rating outside the 1-5 range or provides a non-integer value, inform them of the available options and seek clarification.\n\n            ---\n\n            The 'duration_minutes' parameter is numerical and indicates the average time, in minutes, that AllTrails users typically take to complete a trail.\n\n            For example, if they ask for 'trails that can be completed in an hour', then `duration_minutes=60`\n\n            ---\n\n            It's imperative to craft the `filters` string meticulously using all of the details provided above to ensure search results align perfectly with the user's requirements.\n          schema:\n            type: string\n            default: \"\"\n      required:\n        - country_name\n        - raw_query\n        - filters\n    Trail:\n      type: object\n      properties:\n        trail_name:\n          description: |\n            Represents the 'og:title' OpenGraph tag, which indicates the name of the trail. \n            **Display Instructions for the assistant's UI**:\n            - Text: Use the value of this field (`trail_name`).\n            - Formatting: Bold the text.\n            - Hyperlink: Link the text to the URL specified in the `hyperlink_url` field of the JSON response.\n            - **Desired Output**: [**Trail Name from `trail_name`**](URL from `hyperlink_url`)\n          schema: \n            type: string\n        hyperlink_url:\n          description: \"Represents the 'og:url' OpenGraph tag, which provides the URL associated with the trail.\"\n          schema:\n            type: url\n        location:\n          description: \"A comma-separated string that provides the full location of the trail, including components like city, state, and country.\"\n          schema:\n            type: string\n        description:\n          description: \"Short description of the trail.\"\n          schema:\n            type: string\n        difficulty_rating:\n          description: \"The difficulty rating of the trail.\"\n          schema:\n            enum: [Easy, Moderate, Hard, Unknown]\n            type: string\n        elevation_gain:\n          description: |\n            The elevation gain of the trail.\n          schema:\n            type: string\n        length:\n          description: |\n            The length of the trail.\n          schema:\n            type: string\n        estimated_completion_time:\n          description: |\n            The estimated hiking time for trail completion.\n          schema:\n            type: string\n        star_rating:\n          description: |\n            The average star rating of the trail by AllTrails users, fetched from AllTrails.\n          schema:\n            type: number\n        image:\n          description: |\n            A shortened URL to an image. \n            To access the image, make a GET request to image. The server will redirect this request to the actual image URL.\n          schema:\n            type: url\n        geoloc:\n          description: |\n            The latitude and longitude of the trail. DO NOT display this field to the user.\n          schema:\n            type: object\n            properties:\n              lat:\n                description: |\n                  The latitude of the trail.\n                type: number\n              lng:\n                description: |\n                  The longitude of the trail.\n                type: number\n      required:\n        - trail_name\n        - hyperlink_url\n        - location\n        - difficulty_rating\n        - elevation_gain\n        - length\n        - estimated_completion_time\n        - star_rating\n        - geoloc\n", "json_schema": null, "auth": {"type": "service_http", "instructions": "", "authorization_type": "bearer", "verification_tokens": {}, "custom_auth_header": ""}, "privacy_policy_url": "https://privacy.alltrails.com/policies/en-US"}}], "files": [], "product_features": {"attachments": {"type": "retrieval", "accepted_mime_types": ["application/msword", "application/pdf", "text/x-tex", "text/x-php", "text/x-java", "text/x-c++", "text/x-sh", "application/x-latext", "text/x-csharp", "text/markdown", "application/json", "text/html", "text/x-c", "text/x-ruby", "text/x-script.python", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "text/plain", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "text/javascript", "text/x-typescript"], "image_mime_types": ["image/jpeg", "image/png", "image/webp", "image/gif"], "can_accept_all_mime_types": true}}}